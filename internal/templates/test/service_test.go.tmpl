package service_test

import (
	"context"
	"testing"

	"{{.GoModule}}/internal/service"
	"{{.GoModule}}/pkg/pb"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockRepository is a mock implementation of the repository
type MockRepository struct {
	mock.Mock
}

func (m *MockRepository) Create(ctx context.Context, item interface{}) error {
	args := m.Called(ctx, item)
	return args.Error(0)
}

func (m *MockRepository) FindByID(ctx context.Context, id uint) (interface{}, error) {
	args := m.Called(ctx, id)
	return args.Get(0), args.Error(1)
}

// Add other repository methods as needed

func Test{{.ServiceName}}_{{.RPCs0.Name}}(t *testing.T) {
	t.Run("success", func(t *testing.T) {
		// Create mock repository
		mockRepo := new(MockRepository)

		// Set up expectations
		// mockRepo.On("SomeMethod", mock.Anything, mock.Anything).Return(result, nil)

		// Create service instance
		svc := service.New{{.ServiceName}}(mockRepo)

		// Create request
		req := &pb.{{.RPCs0.Request}}{
			// Populate request fields
		}

		// Call method
		resp, err := svc.{{.RPCs0.Name}}(context.Background(), req)

		// Assert results
		assert.NoError(t, err)
		assert.NotNil(t, resp)
		// Add more specific assertions

		// Verify mock expectations
		mockRepo.AssertExpectations(t)
	})

	t.Run("error", func(t *testing.T) {
		// Create mock repository
		mockRepo := new(MockRepository)

		// Set up expectations to return an error
		// mockRepo.On("SomeMethod", mock.Anything, mock.Anything).Return(nil, someError)

		// Create service instance
		svc := service.New{{.ServiceName}}(mockRepo)

		// Create request
		req := &pb.{{.RPCs0.Request}}{
			// Populate request fields
		}

		// Call method
		resp, err := svc.{{.RPCs0.Name}}(context.Background(), req)

		// Assert results
		assert.Error(t, err)
		assert.Nil(t, resp)

		// Verify mock expectations
		mockRepo.AssertExpectations(t)
	})
}

// Add tests for other RPC methods