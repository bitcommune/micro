package middleware

import (
	"context"
	"log"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/status"
)

// LoggingInterceptor logs gRPC requests
func LoggingInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
	start := time.Now()

	// Call the handler
	resp, err := handler(ctx, req)

	// Log the request details
	duration := time.Since(start)
	statusCode := status.Code(err)

	log.Printf("gRPC method: %s, duration: %v, status: %s",
		info.FullMethod, duration, statusCode.String())

	return resp, err
}

// LoggingStreamInterceptor logs gRPC streaming requests
func LoggingStreamInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
	start := time.Now()

	err := handler(srv, ss)

	duration := time.Since(start)
	statusCode := status.Code(err)

	log.Printf("gRPC stream: %s, duration: %v, status: %s",
		info.FullMethod, duration, statusCode.String())

	return err
}