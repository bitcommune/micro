
package handler_test

import (
	"context"
	"testing"

	"{{.GoModule}}/internal/handler"
	"{{.GoModule}}/internal/service"
	"{{.GoModule}}/pkg/pb"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockService is a mock implementation of the service
type MockService struct {
	mock.Mock
}

func (m *MockService) {{.RPCs0.Name}}(ctx context.Context, req *pb.{{.RPCs0.Request}}) (*pb.{{.RPCs0.Response}}, error) {
	args := m.Called(ctx, req)
	return args.Get(0).(*pb.{{.RPCs0.Response}}), args.Error(1)
}

// Add other service methods as needed

func Test{{.ServiceName}}Handler_{{.RPCs0.Name}}(t *testing.T) {
	t.Run("success", func(t *testing.T) {
		// Create mock service
		mockService := new(MockService)

		// Set up expectations
		expectedResp := &pb.{{.RPCs0.Response}}{}
		mockService.On("{{.RPCs0.Name}}", mock.Anything, mock.Anything).Return(expectedResp, nil)

		// Create handler instance
		handler := handler.New{{.ServiceName}}Handler(mockService)

		// Create request
		req := &pb.{{.RPCs0.Request}}{
			// Populate request fields
		}

		// Call method
		resp, err := handler.Handle{{.RPCs0.Name}}(context.Background(), req)

		// Assert results
		assert.NoError(t, err)
		assert.Equal(t, expectedResp, resp)

		// Verify mock expectations
		mockService.AssertExpectations(t)
	})

	t.Run("error", func(t *testing.T) {
		// Create mock service
		mockService := new(MockService)

		// Set up expectations to return an error
		mockService.On("{{.RPCs0.Name}}", mock.Anything, mock.Anything).Return((*pb.{{.RPCs0.Response}})(nil), assert.AnError)

		// Create handler instance
		handler := handler.New{{.ServiceName}}Handler(mockService)

		// Create request
		req := &pb.{{.RPCs0.Request}}{
			// Populate request fields
		}

		// Call method
		resp, err := handler.Handle{{.RPCs0.Name}}(context.Background(), req)

		// Assert results
		assert.Error(t, err)
		assert.Nil(t, resp)

		// Verify mock expectations
		mockService.AssertExpectations(t)
	})
}

// Add tests for other handler methods