package main

import (
	"context"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	{{if .WithDB}}
	"{{.GoModule}}/internal/repository"
	{{end}}
	"{{.GoModule}}/internal/service"
	"google.golang.org/grpc"
	{{if .WithMiddleware}}
	"{{.GoModule}}/internal/middleware"
	{{end}}
	{{if .WithDB}}
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"github.com/spf13/viper"
	{{end}}
)

func main() {
	{{if .WithDB}}
	// Load configuration
	viper.SetConfigFile("configs/config.yaml")
	if err := viper.ReadInConfig(); err != nil {
		log.Fatalf("Error reading config file: %v", err)
	}

	// Initialize database
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=disable",
		viper.GetString("database.host"),
		viper.GetString("database.user"),
		viper.GetString("database.password"),
		viper.GetString("database.name"),
		viper.GetInt("database.port"),
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// Auto migrate models
	// Note: In production, you should use proper migrations
	err = db.AutoMigrate(&repository.User{}) // Add your models here
	if err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	{{end}}

	// Create gRPC server with optional middleware
	var opts []grpc.ServerOption
	{{if .WithMiddleware}}
	// Add middleware
	opts = append(opts, grpc.UnaryInterceptor(middleware.LoggingInterceptor))
	opts = append(opts, grpc.UnaryInterceptor(middleware.AuthInterceptor))
	{{end}}

	s := grpc.NewServer(opts...)

	// Register services
	service.RegisterExampleServiceServer(s, &service.ExampleServiceServer{})
	// Add more service registrations here

	// Start server
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	go func() {
		log.Printf("Server listening at %v", lis.Addr())
		if err := s.Serve(lis); err != nil {
			log.Fatalf("Failed to serve: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server...")

	// Graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Stop the gRPC server
	stopped := make(chan struct{})
	go func() {
		s.GracefulStop()
		close(stopped)
	}()

	select {
	case <-ctx.Done():
		s.Stop()
	case <-stopped:
	}

	log.Println("Server exited properly")
}